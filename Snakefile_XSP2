from itertools import chain, combinations
from os.path import join
import glob
import re

RAWDATA_DIR = 'inputs/rawdata/'

CANINE_SAMPLES = ['D10_CD5', 'D8_IL2', 'D11_CD5', 'D9_CD5', 'D12_CD5', 
                  'D1_R', 'D2_R', 'D3_R', 'D4_R', 'D5_IL2', 'D6_IL2', 'D7_IL2']
HUMAN_SAMPLES = ['HA_R', 'HB_R', 'HC_R', 'HD_R', 'HE_IL2', 'HF_IL2', 'HG_IL2', 'HH_IL2']
MOUSE_SAMPLES = ['M1_R', 'M2_R', 'M3_R', 'M4_R', 'M5_IL2', 'M6_IL2', 'M7_IL2', 'M8_IL2']
SAMPLE_NAMES = ['D10_CD5', 'D8_IL2', 'D11_CD5', 'D9_CD5', 'M1_R', 'D12_CD5',
                'HA_R', 'M2_R', 'D1_R', 'HB_R', 'M3_R', 'D2_R', 'HC_R', 'M4_R', 
                'D3_R', 'HD_R', 'M5_IL2', 'D4_R', 'HE_IL2', 'M6_IL2', 'D5_IL2',
                'HF_IL2', 'M7_IL2', 'D6_IL2', 'HG_IL2', 'M8_IL2', 'D7_IL2', 'HH_IL2']


rule all:
    input: 
        expand('outputs/quant_cf_nonribo/{cf}_quant/quant.sf', cf = CANINE_SAMPLES),
	expand('outputs/quant_hs_nonribo/{hs}_quant/quant.sf', hs = HUMAN_SAMPLES), 
        expand('outputs/quant_mm_nonribo/{mm}_quant/quant.sf', mm = MOUSE_SAMPLES),
	expand('outputs/ribo/{sample}-nonribo.qc.fq.gz', sample = SAMPLE_NAMES)

rule cat_fastq:
    output: 'inputs/cat/{sample}.fq.gz'
    params: indir = RAWDATA_DIR
    shell:'''
    cat {params.indir}/{wildcards.sample}_UMI_L7_S*_L00*_R1_001.fastq.gz > {output} 
    '''

rule first_12_qc:
    output: 'outputs/quality/{sample}.trim.fq.gz'
    input: 'inputs/cat/{sample}.fq.gz'
    conda: 'env.yml'
    shell:''' 
    trimmomatic SE {input} {output} LEADING:12
    '''
    
rule bbduk_qc:
    output: 'outputs/quality/{sample}.trimbb.fq.gz'
    input:
        fq = 'outputs/quality/{sample}.trim.fq.gz',
        polyA = 'inputs/polyA.fa',
        truseqr = 'inputs/truseq_rna.fa.gz',
        truseq = 'inputs/adapters.fa'
    conda: 'env.yml'
    shell:'''
    bbduk.sh in={input.fq} out={output} ref={input.polyA},{input.truseq},{input.truseqr} k=13 ktrim=r useshortkmers=t mink=5 qtrim=r trimq=10 minlength=20
    '''

rule bbduk_find_ribo:
    output:
        ribo='outputs/ribo/{sample}-ribo.qc.fq.gz',
        nonribo='outputs/ribo/{sample}-nonribo.qc.fq.gz'
    input: 
        reads='outputs/quality/{sample}.trimbb.fq.gz',
        ribo='inputs/ribokmers.fa.gz'
    conda: 'env.yml'
    shell:'''
    bbduk.sh -Xmx4g in={input.reads} outm={output.ribo} outu={output.nonribo} k=31 ref={input.ribo}
    '''

rule download_cf_transcriptome:
    output: 'inputs/transcriptomes/GCF_000002285.3_CanFam3.1_rna.fna.gz'
    shell:'''
    curl -L ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/002/285/GCF_000002285.3_CanFam3.1/GCF_000002285.3_CanFam3.1_rna.fna.gz -o {output}
    '''

rule download_hs_transcriptome:
    output: 'inputs/transcriptomes/GCF_000001405.39_GRCh38.p13_rna.fna.gz'
    shell:'''
    curl -L ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/405/GCF_000001405.39_GRCh38.p13/GCF_000001405.39_GRCh38.p13_rna.fna.gz -o {output}
    '''
	
rule download_mm_transcriptome:
	output: 'inputs/transcriptomes/GCF_000001635.26_GRCm38.p6_rna.fna.gz'
	shell:'''
	curl -L ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/635/GCF_000001635.26_GRCm38.p6/GCF_000001635.26_GRCm38.p6_rna.fna.gz -o {output}
	'''

rule index_cf:
    output: directory('inputs/transcriptomes/cf_index')
    input: 'inputs/transcriptomes/GCF_000002285.3_CanFam3.1_rna.fna.gz'
    conda: 'env.yml'
    shell:'''
    salmon index -t {input} -i {output}
    '''

rule index_hs:
    output: directory('inputs/transcriptomes/hs_index')
    input: 'inputs/transcriptomes/GCF_000001405.39_GRCh38.p13_rna.fna.gz'
    conda: 'env.yml'
    shell:'''
    salmon index -t {input} -i {output}
    '''
	
rule index_mm:
    output: directory('inputs/transcriptomes/mm_index')
    input: 'inputs/transcriptomes/GCF_000001635.26_GRCm38.p6_rna.fna.gz'
    conda: 'env.yml'
    shell:'''
    salmon index -t {input} -i {output}
    '''

rule salmon_cf:
    output: 'outputs/quant_cf_nonribo/{cf}_quant/quant.sf',
    input:
        fq = 'outputs/ribo/{cf}-nonribo.qc.fq.gz',
        indx = 'inputs/transcriptomes/cf_index'
    conda: 'env.yml'
    params: outdir = "outputs/quant_cf_nonribo/{cf}_quant/"
    shell:'''
    salmon quant -i {input.indx} -l A -r {input.fq} --writeUnmappedNames -o {params.outdir}
    '''

rule salmon_hs:
    output: 'outputs/quant_hs_nonribo/{hs}_quant/quant.sf',
    input:
        fq = 'outputs/ribo/{hs}-nonribo.qc.fq.gz',
        indx = 'inputs/transcriptomes/hs_index'
    conda: 'env.yml'
    params: outdir = "outputs/quant_hs_nonribo/{hs}_quant/"
    shell:'''
    salmon quant -i {input.indx} -l A -r {input.fq} --writeUnmappedNames -o {params.outdir}
    '''

rule salmon_mm: 
    output: 'outputs/quant_mm_nonribo/{mm}_quant/quant.sf',
    input:
        fq = 'outputs/ribo/{mm}-nonribo.qc.fq.gz',
        indx = 'inputs/transcriptomes/mm_index'
    conda: 'env.yml'
    params: outdir = "outputs/quant_mm_nonribo/{mm}_quant/"
    shell:'''
    salmon quant -i {input.indx} -l A -r {input.fq} --writeUnmappedNames -o {params.outdir}
    '''
